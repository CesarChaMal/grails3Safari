curl -s get.sdkman.io | bash

Open a new terminal or type the command:

$ source "$HOME/.sdkman/bin/sdkman-init.sh"

Then install the latest stable Groovy:

$ sdk install groovy
After installation is complete and you’ve made it your default version, test it with:

$ groovy -version

  candidate  :  the SDK to install: groovy, scala, grails, gradle, kotlin, etc.
                 use list command for comprehensive list of candidates
                 eg: $ sdk list

   version    :  where optional, defaults to latest stable if not provided
                 eg: $ sdk install groovy


sdk list java
sdk use java 8u151-oracle

grails -version
groovy -version
groovysh

1 + 1
System.out.println("Hello World!")
println("Hello World")
println "Hello World"
println 'Hello World'
name = 'Dolly'
println "Hello, ${name}"
println "Hello, $name"
void sayHello(String name) {
println "Hello, $name!"
}
sayHello('Cesar')
:x

groovyConsole

import groovy.transform.*
//@ToString
//@EqualsAndHashCode
//@TupleConstructor
@Canonical
class Person {
    String first
    String last
    
//    void setLast(String last) {
//        println 'inside setLast method'
//        this.last = last
//    }
    
    // String toString() { "$first $last" }  // last evaluated expression
    //  returned automatically
}

// POGO --> Plain Old Groovy Object
// class is public by default
// attributes (fields) are private by default
// methods are public by default

// Any attribute without public/private --> getters and setters
//  are autogenerated

Person p = new Person()
p.setFirst('Guillaume')  // autogenerated
p.last = 'Laforge'       // using setLast method
println "${p.getFirst()} ${p.last}"
Person p1 = new Person('Guillaume', 'Laforge')
println p1

Person graeme1 = new Person(first: 'Graeme', last: 'Rocher')
Person graeme2 = new Person(first: 'Graeme', last: 'Rocher')
assert graeme1 == graeme2 // == operator invokes the .equals method

List people = [p, graeme1, graeme2, p1]
println people
println people.class.name
// assert people.class == ArrayList
assert people[0] == p

Map map = [a:1, b:2, c:2] // keys are assumed to be strings
println map
println map.keySet()
println map.values()
println map.getClass().name
assert map['a'] == 1      // overridden getAt method
assert map.a == 1         // overridden dot operator
assert map.get('a') == 1  // method from Java

people.each { person -> println person }  // closure == braces + arrow
people.each { println it }  // one-arg closures only have an "it" variable
people.eachWithIndex { person, idx ->
    println "$idx is the index for $person"
}
map.each { k,v -> println "$k maps to $v" }
map.each { entry -> println "${entry.key} maps to ${entry.value}" }

// Collect method --> creates a new collection by
// applying a closure to each element of a collection
List lastNames = people.collect { it.last }
assert lastNames == ['Laforge', '']

http://start.grails.org/#/index
or
grailsw create-app hello

./grailsw

create-controller welcome

http://localhost:8080/welcome/index?name=Cesar
http://localhost:8080/welcome/greet?name=Cesar
http://localhost:8080/welcome/hi?name=Cesar


stop-app

compile
test-app
open test-report

create-domain-class Quest
generate-all com.oreilly.Quest
run-app
stop-app
create-domain-class Task
generate-all com.oreilly.Task
schema-export
create-domain-class Knight
create-domain-class Castle
generate-all *


http://localhost:8080/dbconsole

jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE

grails console

import com.oreilly.*

Task.list()
Quest.count()



